import { useEffect, useRef, useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useLang } from '../modules/lang/LangContext';
import {
  IconHomeDefault,
  IconHomeActive,
  IconSalesDefault,
  IconSalesActive,
  IconInventoryDefault,
  IconInventoryActive,
  IconRankingsDefault,
  IconRankingsActive,
  IconSettingsDefault,
  IconLanguageDefault,
  IconSocialDefault,
  IconSocialActive,
  IconUser,
  IconChevron,
  IconCheck,
  IconChevronDown,
} from './icons/SidebarIcons';

type Item = {
  label: string;
  to: string;
  icon: JSX.Element;
};


function LangMenuItems({ onSelect }: { onSelect: () => void }) {
  const { lang, setLang, t } = useLang();
  const entry = (
    key: 'en' | 'hi',
    label: string,
  ) => (
    <button
      key={key}
      onClick={() => {
        setLang(key);
        onSelect();
      }}
      className={
        'flex w-full items-center justify-between rounded-md px-2 py-2 text-sm hover:bg-gray-50 ' +
        (lang === key ? 'text-gray-900' : 'text-gray-700')
      }
    >
      <span>{label}</span>
      {lang === key && <IconCheck className="h-4 w-4 text-green-600" />}
    </button>
  );
  return (
    <div className="space-y-1">
      {entry('en', t('english'))}
      {entry('hi', t('hindi'))}
    </div>
  );
}

export default function Sidebar() {
  const [collapsed, setCollapsed] = useState(false);
  const location = useLocation();
  const { t } = useLang();

  const items: Item[] = [
    { label: t('home'), to: '/', icon: <span /> },
    { label: t('sales'), to: '/dashboard', icon: <span /> },
    { label: t('inventory'), to: '/inventory', icon: <span /> },
    { label: t('rankings'), to: '/rankings', icon: <span /> },
    { label: t('social_media'), to: '/social', icon: <span /> },
  ];

  // Bottom menus handled explicitly (Amod, Settings, Language)

  const [openMenu, setOpenMenu] = useState<null | 'amod' | 'settings' | 'lang'>(null);

  const amodRef = useRef<HTMLDivElement | null>(null);
  const settingsRef = useRef<HTMLDivElement | null>(null);
  const langRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    function onDocClick(e: MouseEvent) {
      const t = e.target as Node;
      if (
        !amodRef.current?.contains(t) &&
        !settingsRef.current?.contains(t) &&
        !langRef.current?.contains(t)
      ) {
        setOpenMenu(null);
      }
    }
    document.addEventListener('click', onDocClick);
    return () => document.removeEventListener('click', onDocClick);
  }, []);

  return (
    <aside
      className={
        // Ensure a space between class groups so Tailwind utilities are parsed correctly
        `group relative flex h-full flex-col border-r border-gray-200 bg-white/90 backdrop-blur rounded-3xl overflow-visible ` +
        `transition-[width] duration-300 ease-in-out ${collapsed ? 'w-[72px]' : 'w-64'}`
      }
    >
      <div className="flex items-center justify-between px-3 py-3">
        <div className="flex items-center gap-2">
          <div className="flex  items-center justify-center rounded-full bg-rose-50 text-rose-600 ring-1 ring-rose-100">
            <span className="text-sm font-semibold"><svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M8.87104 27.5657C8.87104 38.2832 17.5629 46.9751 28.2804 46.9751C38.9979 46.9751 47.6898 38.2832 47.6898 27.5657C47.6898 16.8482 38.9979 8.15633 28.2804 8.15633C39.7867 8.15633 49.1171 16.0594 49.1171 27.5657C49.1171 39.0719 39.762 48.985 28.2558 48.985C16.7495 48.985 6.01185 39.0719 6.01185 27.5657C6.01185 39.9167 15.9272 49.8589 28.2782 49.8589C40.6292 49.8589 50.6476 39.9189 50.6476 27.5657C50.6476 15.2124 40.609 4.07368 28.258 4.07368C41.5188 4.07368 52.2923 14.3072 52.2923 27.5657C52.2923 40.8242 41.5389 51.8845 28.2782 51.8845C15.0174 51.8845 3.7218 40.7368 3.37673 27.5522C3.37673 27.7024 3.38345 27.9377 3.39017 28.1236C3.74197 41.4919 14.1054 52.8861 28.2558 52.8861C42.4061 52.8861 54.0602 41.7989 54.0602 27.5634C54.0602 13.328 42.5136 0 28.2782 0C43.5601 0 55.9514 12.2838 55.9514 27.5657C55.9514 42.8476 43.5578 55.2389 28.2782 55.2389C12.9985 55.2389 0.604919 42.8476 0.604919 27.5657C0.604919 17.1171 5.84827 8.21234 14.6275 3.07207C16.028 2.25195 17.4643 1.52371 18.8984 0.842521C19.4877 1.46097 20.7649 2.01667 22.3021 2.4469C23.8684 2.88384 25.7148 3.35216 27.4782 3.3432V3.80255C23.3015 3.72188 20.384 4.5532 16.7338 6.58556C16.4739 6.20911 15.9003 6.13965 15.2146 6.59452C14.5289 7.0494 14.0315 8.01964 14.2264 8.62016C14.4191 9.22068 15.1922 9.19379 15.8443 8.71203C16.4963 8.22803 16.8593 7.59166 16.8638 7.05164C20.4468 5.0148 23.353 4.15211 27.4782 4.25966V4.71229C25.7573 4.56216 24.0947 5.18061 22.9026 6.2136C21.6724 7.28019 20.9644 8.64033 20.7515 9.56575C14.2152 13.2495 8.8688 19.6895 8.8688 27.5679" fill="#C41E3A" />
              <path fill-rule="evenodd" clip-rule="evenodd" d="M29.0271 42.9346C28.8882 42.8875 28.7694 42.836 28.6462 42.7867C28.6327 42.7486 28.6238 42.7217 28.6103 42.7015C28.9151 42.7015 29.4035 42.287 29.6411 42.0764C30.0332 41.4714 30.2931 40.9112 30.5217 40.2188C30.7323 39.132 30.7928 38.4576 30.8399 38.359C31.6622 37.9041 33.4055 38.2312 33.9926 38.9908C34.4699 40.1067 32.9148 40.7454 32.1798 41.2428C31.0998 42.1077 30.3895 42.8427 29.0271 42.9301M28.8209 41.1084C26.634 40.8193 24.3551 39.8737 22.381 38.9079C20.9335 38.0206 19.6809 37.0324 18.4239 35.8919C16.6761 33.9693 16.4565 33.6534 16.3848 33.6198C15.9658 32.8669 17.2049 33.0439 17.5208 33.2276C19.2709 35.2174 20.9716 36.9092 23.2908 38.1685C23.7927 38.3814 24.2924 38.6077 24.7966 38.834C26.2441 39.3337 27.7543 39.8827 29.2601 40.0933C29.6904 40.3824 29.8875 40.7476 29.3453 41.0747C29.166 41.0837 28.9912 41.0972 28.8232 41.1084H28.8209ZM29.3072 39.5197C29.1757 39.5047 29.0084 39.4554 28.8053 39.3718C28.7694 39.2485 28.7761 38.5315 28.8277 38.2828C29.1862 37.7943 29.9324 38.1102 30.1788 38.5584C30.1788 39.3359 30.0444 39.4345 29.3072 39.5197ZM25.6749 38.6951C25.1999 38.5315 24.819 38.5248 24.8078 37.9713C25.2604 37.0324 25.5808 36.2078 26.4883 37.2408C26.625 37.745 26.6116 38.3455 26.1791 38.6727C26.0088 38.6727 25.8385 38.6816 25.6749 38.6928V38.6951ZM34.7791 37.7338C34.4094 37.6576 33.6878 37.633 33.587 37.2072C34.387 36.3423 35.113 35.3944 35.7941 34.4309C35.8927 34.4055 35.9757 34.4011 36.0429 34.4175C36.0742 34.4683 36.131 34.9187 36.2132 35.7687C36.2132 36.4476 36.3207 37.2968 35.6978 37.671C35.3931 37.689 35.0861 37.7091 34.7791 37.736V37.7338ZM30.9676 37.5433C29.6791 37.4447 28.5364 37.308 27.3219 36.8554C25.5539 35.9591 21.0142 32.3784 23.2841 30.0682H25.7242C27.5348 32.5599 29.7822 35.3429 32.4106 37.4828C31.9199 37.4963 31.4426 37.5232 30.9676 37.5433ZM22.2802 36.9428C21.8276 36.6717 21.2024 36.5843 21.0926 35.9681C21.2136 35.7978 21.4959 35.5468 21.9844 35.0068C22.2085 34.6438 22.4012 34.0433 22.8695 34.0433C23.1138 34.357 23.349 34.6684 23.47 35.0583C23.3983 35.697 22.9076 36.7098 22.2824 36.945L22.2802 36.9428ZM32.8655 36.8554C32.5316 36.6067 31.6017 35.7082 31.6779 35.2936C32.8184 33.6444 33.9567 31.8653 34.8777 30.0682H36.0675C36.5 32.5218 34.8396 34.8343 33.4571 36.656C33.23 36.7561 33.0335 36.8226 32.8677 36.8554H32.8655ZM18.7757 33.9066C18.4687 33.5951 18.1258 33.2926 17.904 32.9184C17.9287 32.8557 17.9511 32.8019 17.9892 32.7548C18.9706 31.9437 20.0619 31.2423 20.64 30.0659H22.036C21.3637 31.7084 20.3823 33.1179 18.7757 33.9066ZM29.5537 33.2837C29.2243 32.9946 28.5117 32.3963 28.5117 31.9437C29.0159 31.2423 29.4999 30.6934 30.0735 30.0682H31.8728C31.8482 30.2811 31.8258 30.3528 31.7743 30.4558C31.3956 31.1998 30.4029 33.1694 29.5537 33.2837ZM37.8332 28.8089C38.0864 28.8089 38.2545 28.8985 38.2545 29.1383C38.2545 29.3758 38.073 29.4609 37.8355 29.4609H19.3964C19.0849 29.4609 18.7152 29.499 18.704 29.1472C18.6928 28.7954 19.0894 28.8089 19.3829 28.8089H37.8332ZM40.1255 28.7036C39.9037 28.6453 39.8701 28.7148 39.5721 28.5131C39.4511 28.4302 39.4309 28.1053 39.5631 28.0896C39.9328 28.0493 40.8515 27.9574 40.6745 28.5355C40.623 28.7036 40.2913 28.7439 40.1255 28.7013V28.7036ZM22.7956 28.2532C22.7844 28.2308 24.3731 28.2532 26.0469 27.2897C27.0104 28.0067 28.9531 28.2532 30.1878 28.2532H22.7956ZM38.3889 28.3854C37.524 28.3204 37.3179 26.79 37.831 25.8018C38.2881 24.919 40.1367 24.594 39.7311 25.4993C39.4712 26.0819 38.6601 25.8668 38.5391 26.9894C38.4629 27.6975 39.0724 28.4369 38.3889 28.3854ZM35.3191 28.242C35.3191 27.1776 35.355 25.9497 36.5717 25.7749C36.8854 25.9385 37.1319 27.4644 37.161 27.8543C37.2103 27.9933 37.2103 28.0291 37.1834 28.2554L35.3191 28.2442V28.242ZM29.8338 27.5048C29.6231 27.4488 29.7038 27.2 29.8203 27.153C30.1071 27.0365 31.2768 26.9961 31.0931 27.4555C31.0326 27.6056 30.2998 27.628 29.8338 27.5025V27.5048ZM39.5586 27.6818C39.5183 27.6168 39.6146 27.3076 39.7715 27.2919C40.0157 27.265 41.3288 27.1216 41.0308 27.6683C40.8851 27.9372 39.7177 27.9395 39.5586 27.6818ZM32.5742 27.5765C32.1664 27.4846 32.1597 27.0611 32.3143 26.5905C32.4285 26.2455 32.5473 25.7906 32.3613 25.4612C31.8706 25.0892 31.846 24.9145 31.884 24.2871C32.2403 22.7387 32.3232 21.8021 32.433 21.4749C32.9596 21.3987 33.5198 21.6564 33.7215 22.0463C34.3332 23.2272 34.2592 24.5067 33.7215 25.8959C33.5624 26.3105 33.0761 27.6885 32.572 27.5765H32.5742ZM28.6887 27.6728C27.6938 27.5272 26.2015 27.2919 26.1096 26.3754C25.9998 25.2864 27.2614 24.9974 27.8104 24.9369C28.7829 24.8316 30.5508 25.0512 31.1648 25.3649C31.5076 25.5396 31.4449 25.7861 30.9116 25.6539C29.7105 25.3559 29.3161 25.766 29.3565 27.4196C29.3632 27.7221 28.8747 27.6997 28.6887 27.6728ZM30.0354 26.8236C29.8114 26.7564 29.7912 26.6107 29.8651 26.5211C29.9861 26.3732 31.1379 26.3822 31.0751 26.7429C31.0348 26.9804 30.3872 26.9311 30.0354 26.8236ZM40.1255 26.8303C39.7468 26.7765 39.5093 26.4852 39.8947 26.2186C40.2376 26.1693 41.8307 26.0147 41.2302 26.79C40.9994 26.9065 40.4952 26.8169 40.1255 26.8303ZM30.7569 26.2656C30.5284 26.2522 29.9234 26.2679 29.9861 25.9654C30.0466 25.6629 30.6718 25.8645 30.9272 25.9407C31.3306 26.0617 31.2208 26.2925 30.7569 26.2656ZM40.7395 25.8265C40.2958 25.5643 40.7126 25.3402 41.042 25.3402C41.4924 25.264 41.5439 25.5195 41.2683 25.7458C41.1451 25.8085 41.0599 25.7906 40.7395 25.8265ZM39.6953 24.5268C38.7318 24.5604 38.2007 23.3482 38.4965 22.5751C39.4398 22.5841 40.3966 22.5998 41.3557 22.6222C41.4319 23.5095 41.0913 24.4775 39.6953 24.5268ZM25.1282 19.8504C25.0654 19.8235 25.0139 19.8123 24.9669 19.7966C24.9669 19.3731 25.6548 19.0213 25.7646 19.5098C25.6055 19.7227 25.3567 19.772 25.1282 19.8481V19.8504ZM24.0638 19.4358C23.9854 19.4089 23.9249 19.3865 23.8644 19.3753C23.7143 18.7367 25.0789 18.1116 25.5943 18.4611C25.5651 18.5373 25.5539 18.6112 25.545 18.6874C24.6576 18.7659 24.2745 19.158 24.0616 19.4358H24.0638ZM23.0667 17.7486C22.5827 16.0949 22.7373 13.9662 24.6644 13.0228C26.6004 12.075 29.9189 12.6284 31.4717 16.0254C29.8248 15.2098 28.254 14.9835 26.7258 15.3532C25.2469 15.7117 24.0795 16.6147 23.0667 17.7508V17.7486ZM28.5364 22.2032C28.4871 22.1897 28.198 22.1651 28.1891 22.1292C28.1577 22.0082 28.3011 21.8379 28.4154 21.7864C28.7739 21.6228 29.1391 21.3248 29.2355 21.8357C29.1257 22.0642 28.7694 22.1225 28.5364 22.2032ZM27.9224 21.6631C27.8753 21.6273 27.8238 21.587 27.788 21.5623C27.788 21.1007 28.9419 20.8946 29.1884 21.0492V21.1724C28.7716 21.5466 28.4647 21.6318 27.9224 21.6609V21.6631ZM25.4329 17.7486C25.0632 17.6858 24.5837 17.6186 23.5978 18.2863C25.0386 16.5766 26.7483 15.8574 28.1666 15.8865C29.5873 15.9156 30.5329 16.2965 31.4449 16.8836C32.6481 16.0837 32.7221 18.2326 31.8123 18.7479C31.8123 20.3702 31.4337 21.5758 30.1452 22.5505C28.1442 23.5028 26.0827 22.2502 24.8257 20.6727C24.8257 20.6257 25.0923 20.6727 25.0923 20.6324C26.2329 20.3456 26.4368 19.8795 26.5892 19.7002C26.8939 20.0745 27.2636 20.5338 27.472 20.9618C27.8148 20.973 28.6148 21.0761 28.5229 20.5114C28.4213 20.4367 28.2167 20.3493 27.909 20.2492C27.239 19.1849 26.7684 17.9704 25.4352 17.7486H25.4329ZM28.3661 18.0847C28.2697 18.1004 28.2361 18.004 28.2921 17.9211C28.4759 17.6455 29.0361 17.1211 29.2758 17.4192C29.5178 17.7194 28.691 18.0331 28.3661 18.0847ZM27.9583 18.7076C26.6317 18.2684 28.505 16.9665 29.0383 16.8097C29.3587 16.7156 29.8719 16.673 30.1811 16.8209C30.3043 17.6096 29.4573 18.3155 28.8299 18.5597C28.5521 18.6673 28.2316 18.7972 27.9583 18.7076ZM27.7588 24.3072L23.2773 20.8565C23.4611 20.7624 23.5866 20.6391 23.7793 20.545C24.7607 21.8581 26.7886 23.5678 28.6439 23.6484C30.3626 23.7246 31.2253 22.676 31.4404 22.2793C31.6488 22.7544 31.223 24.2512 30.8197 24.5761C30.1295 24.4327 29.2646 24.231 27.7611 24.3072H27.7588ZM21.9418 20.8363L18.881 18.6829C18.2468 18.237 18.4082 17.576 19.1969 18.1026L22.6791 20.433C22.9591 20.2582 23.1496 20.1103 23.3602 20.0229C21.6954 17.7194 21.3212 13.8407 24.1131 12.3909C27.6692 10.5445 30.9945 12.848 32.2202 15.6333C33.5758 15.7476 33.6946 18.1183 32.6325 19.084C32.6885 19.568 32.6369 20.1439 32.5025 20.4935C34.4721 20.7019 36.0406 23.3235 36.5695 24.9638C37.161 24.715 37.5128 24.6725 38.0103 24.659C37.5128 24.0988 37.2148 22.3331 37.8131 21.7617L42.0279 21.7998C42.7875 22.3735 42.2206 24.2243 41.8195 24.9884C41.9921 25.6517 41.954 26.2388 41.9181 26.9401C41.5618 28.289 40.7283 29.4789 40.5938 30.8816C40.307 31.9721 40.127 32.6182 40.0538 32.8198C39.9575 32.8691 39.8835 32.8422 39.7603 32.831C39.3301 32.1073 39.0612 30.895 38.7788 30.0682H37.0602C37.2798 31.2065 37.0467 32.3493 36.854 33.4965H43.0743C43.9303 33.4965 44.0782 34.6012 43.0945 34.6012H36.984C36.9705 36.3871 37.4254 38.6211 34.5505 38.4732C35.5409 39.7258 34.0195 40.6378 33.1926 41.4445C31.5524 43.0444 29.8001 43.6538 28.7941 43.376C27.8104 43.1049 27.705 42.2803 29.2198 41.8164C29.4685 41.7402 28.8702 41.6461 28.4983 41.5946C24.2005 40.9896 20.0977 38.9819 16.2593 34.599H13.2231C12.6181 34.599 12.5755 33.4943 13.1828 33.4943H15.7708C15.9501 33.4943 15.5087 33.1515 15.5736 32.7929C16.8397 32.4904 19.6361 31.7286 19.8064 30.0659H19.1476C18.686 30.0659 18.0721 29.8508 18.0631 29.1607C18.0541 28.4705 18.6166 28.2532 19.1476 28.2532H21.0478C19.6854 28.0717 18.5494 27.1821 18.3096 26.0752C17.7606 23.5499 19.9453 21.9836 21.9441 20.8341L21.9418 20.8363ZM26.9701 24.4551L22.5379 21.2486C20.5302 22.3645 18.7129 23.7515 19.0647 25.9049C19.291 27.2897 20.631 27.6011 21.7895 27.6191C23.0308 27.637 24.3529 27.5294 25.4688 26.9132C25.5069 26.79 25.545 26.6779 25.5808 26.5681C25.9349 23.7179 22.6746 24.24 20.9806 24.6657C20.9178 24.594 20.8551 24.5291 20.7946 24.4663C20.7946 24.3162 20.7722 24.2176 20.8685 24.1168C21.1016 24.0294 22.1928 23.8389 22.6723 23.7045C22.744 23.402 22.2063 23.263 21.9979 23.1891C21.9822 23.1286 21.9822 23.0659 21.9822 23.0188C22.2533 22.8171 22.4639 22.9157 22.7709 23.0009C22.7911 22.9785 22.8202 22.9516 22.8426 22.9381C22.9166 22.4653 22.2533 22.2883 22.4505 21.8917C23.3468 21.7774 23.712 23.2182 24.2162 23.8053C25.2111 23.765 25.8139 24.3229 26.1455 24.7688C26.3987 24.6321 26.6272 24.5335 26.9678 24.4574L26.9701 24.4551Z" fill="#C41E3A" />
            </svg>
            </span>
          </div>
          {!collapsed && (
            <div className="leading-tight ">
              <svg width="88" height="43" viewBox="0 0 88 43" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M65.1615 2.19463H59.964L60.2793 7.72443H64.9059L65.1615 2.19463ZM6.1658 2.19463L7.42683 10.7577C7.5802 11.7972 7.32459 12.2658 5.97835 12.2658H3.31997L7.80173 16.6794C8.43225 17.3014 8.64526 17.7956 7.74209 17.7956H5.39044C4.90477 17.7956 4.6662 17.4207 4.08681 16.6794L0.59342 12.2658V11.1837C0.59342 10.8685 0.712707 10.7577 0.985361 10.7577H3.37961C3.84824 10.7577 4.35094 10.8685 4.32538 9.94825L4.08681 2.19463H0.542297V0.558716H87.6044V2.19463H85.1249L85.7299 16.6709C85.781 17.7871 85.4828 17.7786 85.0994 17.7786H83.0289C82.6284 17.7786 82.3302 17.7786 82.3813 16.6539L82.7988 7.72443H80.4387C80.0723 7.72443 79.6292 7.72441 79.6548 8.50829L79.74 10.5788C79.7911 11.695 79.4929 11.6864 79.1095 11.6864H77.3457C76.9453 11.6864 76.6471 11.6864 76.6982 10.5617L76.7919 8.54238C76.826 7.72442 76.3318 7.72443 75.9399 7.72443H73.4093C73.0344 7.72443 72.9151 7.94597 73.0855 8.61056L74.8322 15.2224C75.0537 16.0404 75.4372 16.2875 76.3063 16.2875H76.4085V17.7956H73.5712C72.9321 17.7956 72.242 17.7956 71.9523 16.4835L69.9926 7.73293C69.7625 6.69343 69.9415 6.1311 70.7424 6.1311H76.9027H76.9112C77.5928 6.14814 78.0615 6.93201 78.1978 7.73293C78.3256 6.90644 78.6409 6.1311 79.5099 6.1311H82.85L83.0289 2.19463H67.1979L67.8028 16.6709C67.854 17.7871 67.5557 17.7786 67.1723 17.7786H65.1018C64.7014 17.7786 64.4032 17.7786 64.4543 16.6539L64.7951 9.31775H60.3304L60.5264 12.8282C60.586 13.9358 60.2707 13.9358 59.8958 13.9358C58.8989 13.9358 57.5953 13.9358 56.5984 13.9358C56.2065 13.9358 55.8571 13.9358 55.9509 12.8111L56.3513 8.16748C56.3939 7.7159 56.5643 7.7159 56.9392 7.7159H57.6209L57.8509 2.18613H45.4963L45.6581 6.12258H53.0539C53.8463 6.12258 54.0338 6.68493 53.8037 7.72443L52.1763 14.9413C51.8781 16.2534 51.1964 16.2534 50.5574 16.2534H47.7201V14.7453H47.8223C48.6829 14.7453 49.0663 14.5067 49.2964 13.6802L50.7108 8.60203C50.8982 7.93744 50.7704 7.7159 50.387 7.7159H45.7348L46.1097 16.6624C46.1609 17.7786 45.8626 17.7701 45.4792 17.7701H43.4087C43.0083 17.7701 42.7101 17.7701 42.7612 16.6453L42.8464 14.822H38.5691C37.9301 14.822 37.4274 14.7709 36.9502 13.5098L34.7605 7.7159C34.3856 6.719 34.7094 6.11405 35.5103 6.11405H41.3809V7.70737H38.1857C37.8023 7.70737 37.5381 7.98855 37.8619 8.5935L39.8387 12.2488C40.2477 12.9986 40.4436 13.3138 41.3127 13.3138H42.9231L43.4343 2.1776H32.3066L32.9115 16.6539C32.9627 17.77 32.6644 17.7615 32.281 17.7615H30.2105C29.8101 17.7615 29.5119 17.7615 29.563 16.6368L29.9805 7.70737H24.6467L27.1602 14.8135C27.893 16.8924 27.2199 17.7786 25.8992 17.7786H19.5088C18.3586 17.7786 17.5832 17.7445 17.0635 14.822L16.4159 11.2178C16.3307 10.7407 16.5693 10.7407 16.859 10.7407H18.5716C18.8016 10.7407 18.9465 10.7577 19.0828 11.2178L20.1734 14.822C20.5995 16.2193 20.7614 16.2704 21.869 16.2704H23.3942C24.2377 16.2704 23.9054 15.3161 23.7861 14.822L22.0735 7.7159C21.852 6.81273 21.639 6.11405 22.4143 6.11405H30.0487L30.2276 2.1776H13.5616L14.1665 16.6624C14.2176 17.7786 13.9194 17.7701 13.536 17.7701H11.4655C11.0651 17.7701 10.7669 17.7701 10.818 16.6453L11.4911 2.1776H6.1658V2.19463Z" fill="#C41E3A" />
                <path fill-rule="evenodd" clip-rule="evenodd" d="M75.9751 24.3556H72.1217L72.3554 28.4554H75.7856L75.9751 24.3556ZM61.231 24.3556L61.8374 28.4554H65.4445L65.634 24.3556H61.231ZM77.8766 36.396H75.1097C74.5727 36.4023 74.1747 36.6992 74.1179 37.173L73.8715 39.2703C73.7705 40.1042 74.0547 40.1042 74.3516 40.1042C75.0907 40.1042 75.6024 40.1042 76.3415 40.1042C76.6258 40.1042 76.8848 40.1042 76.809 39.2829L76.6637 37.5899H78.2051L80.5614 41.4371C80.9656 42.1004 81.351 42.0498 81.8311 42.0498H83.5872C84.0926 42.0498 84.1368 41.5697 83.7136 41.1402L80.0118 37.3562C79.0642 36.3834 78.7547 36.396 77.8766 36.396ZM67.1627 24.3556L67.6113 35.0947C67.6428 35.9222 67.4281 35.9159 67.1438 35.9159H65.6087C65.3118 35.9159 65.0907 35.9159 65.1286 35.0821L65.3813 29.6367H62.0017L62.1596 30.7043C62.2733 31.475 62.0838 31.8224 61.0857 31.8224H59.1147L62.4375 35.0947C62.905 35.5558 63.0629 35.9222 62.3933 35.9222H60.6498C60.2897 35.9222 60.1128 35.6443 59.6833 35.0947L57.0933 31.8224V31.0201C57.0933 30.7864 57.1817 30.7043 57.3838 30.7043H59.159C59.5064 30.7043 59.8791 30.7864 59.8602 30.1042L59.6833 24.3556H57.2638V23.1427H87.6049V24.3556H85.5077L85.773 27.2741H81.7806C81.5026 27.2741 81.1236 27.432 81.2057 27.9374C81.2626 28.3227 81.4837 28.5628 81.9827 28.5691H85.495H85.5013C86.0067 28.5817 86.8027 28.6828 86.6826 29.7567L86.4552 31.873C86.3921 32.4415 86.1394 33.1301 84.737 33.1237H83.4988L83.701 31.8603H84.1179C84.5285 31.8603 84.7243 31.5887 84.7875 31.3044L84.9454 30.6222C85.0781 30.0347 84.5475 29.8262 84.2569 29.8262L82.2101 29.8009C81.7869 29.8009 81.471 30.1042 81.5847 30.5969L82.3807 34.1724C82.5197 34.7851 82.8292 34.962 83.4735 34.962H83.5493L83.7768 36.0802H81.6732C81.1994 36.0802 80.6119 36.0928 80.4729 35.1073L79.8159 30.4453C79.7212 29.7567 79.9928 29.3587 80.5803 29.2766C80.1697 29.2766 79.7464 29.1755 79.639 28.468L79.4243 27.0088C79.3042 26.2128 79.797 26.0107 80.3845 26.0107C82.9619 26.0107 82.3049 26.0107 83.8147 26.0107L83.9663 24.3619H77.5355L77.984 35.0947C78.0219 35.9222 77.8008 35.9159 77.5165 35.9159H75.9814C75.6845 35.9159 75.4634 35.9159 75.5013 35.0821L75.754 29.643H72.4439L72.5892 32.2457C72.6334 33.0669 72.3996 33.0669 72.1217 33.0669C71.3826 33.0669 70.4161 33.0669 69.677 33.0669C69.3864 33.0669 69.1274 33.0669 69.1969 32.233L69.4938 28.7902C69.5253 28.4554 69.6517 28.4554 69.9296 28.4554H70.435L70.6056 24.3556H67.1817H67.1627Z" fill="#C41E3A" />
                <path fill-rule="evenodd" clip-rule="evenodd" d="M39.0578 23.1483H54.1367V24.3612H52.2479L52.6964 35.094C52.728 35.9215 52.5132 35.9152 52.229 35.9152H50.6939C50.397 35.9152 50.1759 35.9152 50.2138 35.0813L50.4665 29.6423H46.4741C46.891 29.6423 47.1753 29.9455 47.2005 30.3941L47.3079 32.2513C47.3522 33.0725 47.1184 33.0725 46.8405 33.0725C46.1014 33.0725 45.1348 33.0725 44.3957 33.0725C44.1052 33.0725 43.8462 33.0725 43.9156 32.2386L44.1746 29.1938C44.2378 28.461 44.5726 28.461 44.9201 28.461H50.517L50.7065 24.3612H41.692L42.1405 35.1003C42.1784 35.9278 41.9573 35.9215 41.6731 35.9215H40.138C39.8411 35.9215 39.62 35.9215 39.6579 35.0877L40.1569 24.3612H39.0515V23.1483H39.0578Z" fill="#C41E3A" />
                <path fill-rule="evenodd" clip-rule="evenodd" d="M3.92196 24.3551L4.27571 28.8718C4.33257 29.592 4.55999 29.8067 5.21065 29.8067H6.48671H7.39638L7.64906 24.3551H3.92196ZM28.6598 24.3551L29.1083 35.0879C29.1462 35.9154 28.9251 35.9091 28.6409 35.9091H27.1058C26.8089 35.9091 26.5878 35.9091 26.6257 35.0752L27.1248 24.3551H19.0704L19.1904 27.2736H24.6737C25.2612 27.2736 25.4002 27.6905 25.2296 28.4612L24.023 33.8118C23.8019 34.7846 23.2966 34.7846 22.8228 34.7846H20.7192V33.6665H20.795C21.433 33.6665 21.7173 33.4896 21.8879 32.8769L22.9365 29.1119C23.0755 28.6191 22.9807 28.4549 22.6964 28.4549H19.2473L19.5253 35.0879C19.5568 35.9154 19.3421 35.9091 19.0578 35.9091H17.5227C17.2258 35.9091 17.0047 35.9091 17.0426 35.0752L17.1058 33.7234H13.9346C13.4608 33.7234 13.0881 33.6855 12.7343 32.7505L11.1108 28.4549C10.8329 27.7158 11.0729 27.2673 11.6668 27.2673H16.0192V28.4486H13.6503C13.3661 28.4486 13.1702 28.657 13.4103 29.1056L14.8759 31.8156C15.1791 32.3715 15.3244 32.6052 15.9687 32.6052H17.1626L17.5417 24.3488H9.19044L9.63896 35.0815C9.67686 35.9091 9.45576 35.9028 9.17148 35.9028H7.63642C7.33952 35.9028 7.11842 35.9028 7.15633 35.0689L7.34584 31.0007L4.53472 35.2963C4.11147 35.947 3.74508 35.9091 3.26498 35.9091H1.50882C1.00345 35.9091 0.952912 35.429 1.38248 34.9994L5.39385 30.9186H3.44817H3.0502C2.75329 30.9186 2.03946 30.9628 2.14685 29.7625L2.61431 24.3488H0.542297V23.1359H29.7274V24.3488H28.6724L28.6598 24.3551Z" fill="#C41E3A" />
                <path fill-rule="evenodd" clip-rule="evenodd" d="M38.0277 24.2661L37.156 30.7096C37.0549 31.4803 37.0802 31.8277 36.082 31.8277H33.2014L36.9791 35.1C37.4718 35.5232 37.6045 35.9275 36.9349 35.9275H35.1913C34.8313 35.9275 34.6923 35.6053 34.2248 35.1L31.18 31.8277V31.0254C31.18 30.7917 31.2684 30.7096 31.4705 30.7096H33.9279C34.2753 30.7096 34.926 30.7664 35.0839 30.1095L36.2968 24.98C36.4105 24.4935 36.3158 24.2661 35.8104 24.2661H32.8477C32.5634 24.2661 32.3486 24.5062 32.5129 24.9926L33.132 26.793C33.3594 27.4499 33.5805 27.5826 34.2248 27.5826H34.7555V28.7007H32.5887C32.1149 28.7007 31.5906 28.7007 31.3884 27.7279L30.6746 24.3419C30.5103 23.5712 30.6367 23.1543 31.2305 23.1543H37.0486C38.1414 23.1543 38.0593 24.0829 38.034 24.2724" fill="#C41E3A" />
              </svg>


            </div>
          )}
        </div>
        <button
          aria-label={collapsed ? t('expand') + ' sidebar' : t('collapse') + ' sidebar'}
          className="ml-2 inline-flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200"
          onClick={() => setCollapsed((v) => !v)}
          title={collapsed ? t('expand') : t('collapse')}
        >
          <div className={`transition-transform ${collapsed ? '' : 'rotate-180'}`}>
            <IconChevron className="h-4 w-4" />
          </div>
        </button>
      </div>

      <nav className="mt-2 flex-1 px-2 flex flex-col overflow-hidden min-h-0">
        <div className="flex-1 overflow-y-auto pr-1">
        <ul className="space-y-1">
          {items.map((it) => {
            const active = location.pathname === it.to;
            const iconEl =
              it.to === '/'
                ? active
                  ? <IconHomeActive className="h-5 w-5" />
                  : <IconHomeDefault className="h-5 w-5" />
                : it.to === '/dashboard'
                  ? active
                    ? <IconSalesActive className="h-5 w-5" />
                    : <IconSalesDefault className="h-5 w-5" />
                  : it.to === '/inventory'
                    ? active
                      ? <IconInventoryActive className="h-5 w-5" />
                      : <IconInventoryDefault className="h-5 w-5" />
                    : it.to === '/rankings'
                      ? active
                        ? <IconRankingsActive className="h-5 w-5" />
                        : <IconRankingsDefault className="h-5 w-5" />
                      : it.to === '/social'
                        ? active
                          ? <IconSocialActive className="h-5 w-5" />
                          : <IconSocialDefault className="h-5 w-5" />
                        : it.icon;
            return (
              <li key={it.label}>
                <Link
                  to={it.to}
                  title={collapsed ? it.label : undefined}
                  className={
                    (
                      // Common
                      'flex items-center text-sm transition-all ' +
                      // Expanded styles
                      (!collapsed
                        ? `gap-3 rounded-lg px-3 py-2 h-[50px] max-w-[200px] ${active ? 'bg-[#526BA3] text-white' : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'}`
                        // Collapsed styles
                        : `${active
                          // active -> centered circle
                          ? 'mx-auto justify-center rounded-full bg-[#526BA3] text-white w-11 h-11'
                          // inactive -> centered icon, no pill
                          : 'mx-auto justify-center rounded-lg w-11 h-11 text-gray-600 hover:text-gray-900'}`)
                    )
                  }
                >
                  <span className={active ? 'text-white' : 'text-gray-500'}>{iconEl}</span>
                  {!collapsed && <span className="truncate">{it.label}</span>}
                </Link>
              </li>
            );
          })}
        </ul>
        </div>

        <div className="my-4 h-px w-full bg-gray-100 shrink-0" />

        {/* Account (Amod) menu */}
        <div className="mt-auto shrink-0">
          <div ref={amodRef} className="relative">
            <button
              onClick={() => setOpenMenu((v) => (v === 'amod' ? null : 'amod'))}
              title={collapsed ? 'Account' : undefined}
              className={
                !collapsed
                  ? 'flex w-full items-center gap-3 rounded-xl border border-rose-200 bg-rose-50 px-3 py-2 text-rose-700 hover:bg-rose-100'
                  : 'flex mx-auto w-11 h-11 items-center justify-center rounded-full bg-rose-50 text-rose-700 hover:bg-rose-100'
              }
            >
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-rose-100 text-rose-600">
                <IconUser className="h-4 w-4" />
              </div>
              {!collapsed && (
                <>
                  <span className="text-sm">Amod M.</span>
                  <IconChevronDown className={`ml-auto h-4 w-4 transition-transform ${openMenu === 'amod' ? 'rotate-180' : ''}`} />
                </>
              )}
            </button>
            {/* Expanded: inline accordion, Collapsed: popover */}
            {(!collapsed && (
              <div
                className={`overflow-hidden transition-[max-height] duration-200 ease-in-out ${openMenu === 'amod' ? 'max-h-40' : 'max-h-0'}`}
              >
                <div className="mt-2 rounded-lg border border-gray-200 bg-white p-1">
                  <Link
                    to="/settings"
                    onClick={() => setOpenMenu(null)}
                    className="flex items-center gap-2 rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                  >
                    <IconSettingsDefault className="h-4 w-4" />
                    <span>My Account</span>
                  </Link>
                </div>
              </div>
            )) ||
              (collapsed && openMenu === 'amod' && (
                <div className="absolute left-full top-0 z-50 ml-2 w-56 rounded-lg border border-gray-200 bg-white p-1 shadow-lg">
                  <Link
                    to="/settings"
                    onClick={() => setOpenMenu(null)}
                    className="flex items-center gap-2 rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                  >
                    <IconSettingsDefault className="h-4 w-4" />
                    <span>My Account</span>
                  </Link>
                </div>
              ))}
          </div>

          {/* Settings and Language as menus */}
          <ul className="mt-4 space-y-1">
            <li>
              <div ref={settingsRef} className="relative">
                <button
                  onClick={() => setOpenMenu((v) => (v === 'settings' ? null : 'settings'))}
                  title={collapsed ? t('settings') : undefined}
                  className={
                    'flex items-center text-sm transition-all ' +
                    (!collapsed
                      ? 'w-full gap-3 rounded-lg px-3 py-2 text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                      : 'mx-auto justify-center rounded-lg w-11 h-11 text-gray-600 hover:text-gray-900')
                  }
                >
                  <span className="text-gray-500">
                    <IconSettingsDefault className="h-5 w-5" />
                  </span>
                  {!collapsed && (
                    <>
                      <span className="truncate">{t('settings')}</span>
                      <IconChevronDown className={`ml-auto h-4 w-4 transition-transform ${openMenu === 'settings' ? 'rotate-180' : ''}`} />
                    </>
                  )}
                </button>
                {(!collapsed && (
                  <div className={`overflow-hidden transition-[max-height] duration-200 ease-in-out ${openMenu === 'settings' ? 'max-h-48' : 'max-h-0'}`}>
                    <div className="mt-2 rounded-lg border border-gray-200 bg-white p-1">
                      <Link
                        to="/settings"
                        onClick={() => setOpenMenu(null)}
                        className="block rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        General
                      </Link>
                     
                    </div>
                  </div>
                )) ||
                  (collapsed && openMenu === 'settings' && (
                    <div className="absolute left-full top-0 z-50 ml-2 w-56 rounded-lg border border-gray-200 bg-white p-1 shadow-lg">
                      <Link
                        to="/settings"
                        onClick={() => setOpenMenu(null)}
                        className="block rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        General
                      </Link>
                      <button
                        onClick={() => setOpenMenu(null)}
                        className="w-full text-left rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        Theme
                      </button>
                      <button
                        onClick={() => setOpenMenu(null)}
                        className="w-full text-left rounded-md px-2 py-2 text-sm text-gray-700 hover:bg-gray-50"
                      >
                        Notifications
                      </button>
                    </div>
                  ))}
              </div>
            </li>
            <li>
              <div ref={langRef} className="relative">
                <button
                  onClick={() => setOpenMenu((v) => (v === 'lang' ? null : 'lang'))}
                  title={collapsed ? t('language') : undefined}
                  className={
                    'flex items-center text-sm transition-all ' +
                    (!collapsed
                      ? 'w-full gap-3 rounded-lg px-3 py-2 text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                      : 'mx-auto justify-center rounded-lg w-11 h-11 text-gray-600 hover:text-gray-900')
                  }
                >
                  <span className="text-gray-500">
                    <IconLanguageDefault className="h-5 w-5" />
                  </span>
                  {!collapsed && (
                    <>
                      <span className="truncate">{t('language')}</span>
                      <IconChevronDown className={`ml-auto h-4 w-4 transition-transform ${openMenu === 'lang' ? 'rotate-180' : ''}`} />
                    </>
                  )}
                </button>
                {(!collapsed && (
                  <div className={`overflow-hidden transition-[max-height] duration-200 ease-in-out ${openMenu === 'lang' ? 'max-h-40' : 'max-h-0'}`}>
                    <div className="mt-2 rounded-lg border border-gray-200 bg-white p-1">
                      <div className="px-2 py-1 text-xs font-medium text-gray-500">{t('select_language')}</div>
                      <LangMenuItems onSelect={() => setOpenMenu(null)} />
                    </div>
                  </div>
                )) ||
                  (collapsed && openMenu === 'lang' && (
                    <div className="absolute left-full top-0 z-50 ml-2 w-56 rounded-lg border border-gray-200 bg-white p-1 shadow-lg">
                      <div className="px-2 py-1 text-xs font-medium text-gray-500">{t('select_language')}</div>
                      <LangMenuItems onSelect={() => setOpenMenu(null)} />
                    </div>
                  ))}
              </div>
            </li>
          </ul>

        </div>

      </nav>



      <div className="mt-auto px-3 pb-3">
        <button
          onClick={() => setCollapsed((v) => !v)}
          title={collapsed ? 'Expand' : 'Collapse'}
          className="flex w-full items-center justify-center gap-2 rounded-full bg-gray-100 py-2 text-xs text-gray-600 hover:bg-gray-200"
        >
          <IconChevron className={`h-4 w-4 transition-transform ${collapsed ? '' : 'rotate-180'}`} />
          {!collapsed && <span>{t('collapse')}</span>}
        </button>
      </div>
    </aside>
  );
}

        </div>
      ) : inventoryItems.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {inventoryItems.map((item) => (
            <div
              key={item.id}
              className="rounded-2xl bg-[#F3F6FD]/60 border border-black/10 p-3 hover:shadow-md transition-all"
            >
              <div className="flex items-start gap-3">
                <div className="h-20 w-16 rounded-md bg-gradient-to-br from-orange-100 to-red-200 flex items-center justify-center text-2xl font-bold text-orange-700 shadow-sm">
                  {item.title.charAt(0).toUpperCase()}
                </div>
                <div className="min-w-0 flex-1">
                  <div
                    className="font-semibold text-[#163060] truncate"
                    title={item.title}
                  >
                    {item.title}
                  </div>
                  <div className="text-xs text-gray-600 truncate">
                    {item.author || "Author not specified"}
                  </div>
                  {item.isbn && (
                    <div className="text-[10px] text-gray-500 mt-0.5">
                      ISBN: {item.isbn}
                    </div>
                  )}
                  <div className="text-xs text-gray-600 mt-1">
                    {item.qtySold > 0 ? (
                      <span>
                        <span className="font-semibold text-[#163060]">
                          Sold:
                        </span>{" "}
                        {item.qtySold} units
                      </span>
                    ) : (
                      <span>
                        <span className="font-semibold text-[#163060]">
                          Revenue:
                        </span>{" "}
                        {formatINR(item.revenue)}
                      </span>
                    )}
                  </div>
                  <div className="mt-2">
                    <div className="text-[11px] text-[#C03548] font-semibold">
                      Stock Available (Est.)
                    </div>
                    <div className="flex items-baseline gap-2">
                      <div className="text-2xl font-extrabold text-[#971A34]">
                        {item.available}
                      </div>
                      <div className="text-[11px] text-gray-500">
                        {item.daysLeft}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {/* alert strip */}
              <div
                className={`mt-3 rounded-xl px-3 py-2 text-xs font-medium flex items-start gap-2 ${
                  item.alert.tone === "red"
                    ? "bg-[#FDEBEE] text-[#A12B3A]"
                    : "bg-[#FFF4DE] text-[#A35C00]"
                }`}
              >
                <span className="mt-0.5">â€¢</span>
                <span>{item.alert.text}</span>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center text-gray-500 py-8">
          <div className="text-3xl mb-2">ðŸ“¦</div>
          <div className="text-sm font-medium">No inventory alerts</div>
          <div className="text-xs mt-1">
            Your best-selling items will appear here
          </div>
        </div>
      )}
    </Card>
  );
}

function SocialMediaCard() {
  return (
    <Card
      title={
        <div className="flex items-center gap-2">
          <span className="font-semibold">Social Media</span>
          <Pill tone="green">All Good</Pill>
        </div>
      }
      className=""
      hoverable
      footer={<FooterButton>Know More</FooterButton>}
    >
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        {/* Panel 1 - Instagram */}
        <div className="rounded-2xl border border-black/10 p-4 hover:shadow-md transition-all">
          <div className="flex flex-col items-center gap-1 text-sm font-medium text-gray-700">
            <CameraIcon className="w-5 h-5" /> Instagram
          </div>

          <div className="mt-4 grid gap-3">
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+835</div>
              <div className="text-[11px] text-gray-600">
                Followers from previous month
              </div>
            </div>
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+20%</div>
              <div className="text-[11px] text-gray-600">
                Views from previous month
              </div>
            </div>
          </div>
        </div>

        {/* Panel 2 - Facebook */}
        <div className="rounded-2xl border border-black/10 p-4 hover:shadow-md transition-all">
          <div className="flex flex-col items-center gap-1 text-sm font-medium text-gray-700">
            <FacebookIcon className="w-5 h-5" /> Facebook
          </div>
          <div className="mt-4 grid gap-3">
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+635</div>
              <div className="text-[11px] text-gray-600">
                Followers from previous month
              </div>
            </div>
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+15%</div>
              <div className="text-[11px] text-gray-600">
                Engagement from previous month
              </div>
            </div>
          </div>
        </div>

        {/* Panel 3 - Twitter/X */}
        <div className="rounded-2xl border border-black/10 p-4 hover:shadow-md transition-all">
          <div className="flex flex-col items-center gap-1 text-sm font-medium text-gray-700">
            <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
            </svg>
            Twitter/X
          </div>
          <div className="mt-4 grid gap-3">
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+1.2K</div>
              <div className="text-[11px] text-gray-600">
                Followers from previous month
              </div>
            </div>
            <div className="rounded-2xl bg-[#EAF1FF] px-4 py-3">
              <div className="text-3xl font-extrabold">+25%</div>
              <div className="text-[11px] text-gray-600">
                Impressions from previous month
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
}

/*******************\
|* Page Entry Point *|
\*******************/
export default function HindiBooksSalesDashboard() {
  const [days, setDays] = useState(90);
  const [summary, setSummary] = useState<SummaryResponse | null>(null);
  const [counts, setCounts] = useState<CountsResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const qs = new URLSearchParams({ days: String(days) }).toString();
      const [summaryData, countsData] = await Promise.all([
        apiClient.get<SummaryResponse>(`online-sales/summary?${qs}`),
        apiClient.get<CountsResponse>(`online-sales/counts?${qs}`),
      ]);

      // Debug: Log what we received
      console.log("ðŸ“Š Summary data received:", summaryData);
      console.log("ðŸ“ˆ Counts data received:", countsData);
      console.log("ðŸ“š Top items:", summaryData?.topItems);

      setSummary(summaryData);
      setCounts(countsData);
    } catch (e: any) {
      const errorMsg =
        e?.response?.data?.details ||
        e?.response?.data?.error ||
        e?.message ||
        "Failed to load data";
      setError(errorMsg);
      console.error("Failed to fetch dashboard data:", e);
      console.error("Error response:", e?.response?.data);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [days]);

  return (
    <main className="mx-auto w-full py-6 text-slate-800 dark:text-slate-100">
      {error && (
        <div className="mb-4 rounded-xl bg-amber-50 border border-amber-200 p-4 text-amber-800 flex items-center gap-2">
          <IoMdInformationCircle className="w-5 h-5 flex-shrink-0" />
          <span className="text-sm">
            {error} - Showing cached data if available.
          </span>
        </div>
      )}

      {/* Layout grid */}
      <div className="grid auto-rows-[minmax(0,1fr)] gap-4 lg:grid-cols-2">
        <div className="grid">
          <RevenueCard
            days={days}
            setDays={setDays}
            summary={summary}
            counts={counts}
            loading={loading}
            onRefresh={fetchData}
          />
        </div>
        <div className="grid gap-4">
          <TopBookCard summary={summary} loading={loading} counts={counts} />
          <TopAuthorCard summary={summary} loading={loading} />
        </div>

        <InventoryCard summary={summary} loading={loading} />
        <SocialMediaCard />
      </div>
    </main>
  );
}

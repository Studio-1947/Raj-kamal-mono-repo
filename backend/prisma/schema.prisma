// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders  Order[]
  reviews Review[]

  @@map("users")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  sku         String        @unique
  description String?
  category    String
  price       Decimal       @db.Decimal(10, 2)
  cost        Decimal       @db.Decimal(10, 2)
  quantity    Int           @default(0)
  status      ProductStatus @default(IN_STOCK)
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress Json?
  billingAddress  Json?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// New enums for Sales event tables (avoid conflict with existing OrderStatus)
enum PaymentMode {
  Cash
  UPI
  Card
  NetBanking
  Wallet
  Cheque
  BankTransfer
  Other
}

enum SalesOrderStatus {
  complete
  pending
  cancelled
  refunded
  unknown
}

// Event-based sales tables preserving rawJson and unique rowHash per row
model OnlineSale {
  id            BigInt            @id @default(autoincrement())
  orderNo       String?
  orderStatus   SalesOrderStatus?
  month         String?
  year          Int?
  isbn          String?
  itemCode      String?
  title         String?
  author        String?
  publisher     String?
  category      String?
  description   String?
  qty           Int?
  rate          Decimal?          @db.Decimal(12, 2)
  amount        Decimal?          @db.Decimal(12, 2)
  discount      Decimal?          @db.Decimal(12, 2)
  tax           Decimal?          @db.Decimal(12, 2)
  shipping      Decimal?          @db.Decimal(12, 2)
  paymentMode   PaymentMode?
  customerName  String?
  mobile        String?
  email         String?
  date          DateTime?
  publisherCode String?
  rowHash       String?           @unique
  rawJson       Json
  createdAt     DateTime          @default(now())

  @@index([date])
  @@index([orderNo])
}

model OfflineCashUPICCSale {
  id            BigInt            @id @default(autoincrement())
  orderNo       String?
  orderStatus   SalesOrderStatus?
  month         String?
  year          Int?
  isbn          String?
  itemCode      String?
  title         String?
  author        String?
  publisher     String?
  category      String?
  description   String?
  qty           Int?
  rate          Decimal?          @db.Decimal(12, 2)
  amount        Decimal?          @db.Decimal(12, 2)
  discount      Decimal?          @db.Decimal(12, 2)
  tax           Decimal?          @db.Decimal(12, 2)
  shipping      Decimal?          @db.Decimal(12, 2)
  paymentMode   PaymentMode?
  customerName  String?
  mobile        String?
  email         String?
  date          DateTime?
  publisherCode String?
  rowHash       String?           @unique
  rawJson       Json
  createdAt     DateTime          @default(now())

  @@index([date])
  @@index([orderNo])
}

model RajRadhaEventSale {
  id            BigInt            @id @default(autoincrement())
  orderNo       String?
  orderStatus   SalesOrderStatus?
  month         String?
  year          Int?
  isbn          String?
  itemCode      String?
  title         String?
  author        String?
  publisher     String?
  category      String?
  description   String?
  qty           Int?
  rate          Decimal?          @db.Decimal(12, 2)
  amount        Decimal?          @db.Decimal(12, 2)
  discount      Decimal?          @db.Decimal(12, 2)
  tax           Decimal?          @db.Decimal(12, 2)
  shipping      Decimal?          @db.Decimal(12, 2)
  paymentMode   PaymentMode?
  customerName  String?
  mobile        String?
  email         String?
  date          DateTime?
  publisherCode String?
  rowHash       String?           @unique
  rawJson       Json
  createdAt     DateTime          @default(now())

  @@index([date])
  @@index([orderNo])
}

model LokEventSale {
  id            BigInt            @id @default(autoincrement())
  orderNo       String?
  orderStatus   SalesOrderStatus?
  month         String?
  year          Int?
  isbn          String?
  itemCode      String?
  title         String?
  author        String?
  publisher     String?
  category      String?
  description   String?
  qty           Int?
  rate          Decimal?          @db.Decimal(12, 2)
  amount        Decimal?          @db.Decimal(12, 2)
  discount      Decimal?          @db.Decimal(12, 2)
  tax           Decimal?          @db.Decimal(12, 2)
  shipping      Decimal?          @db.Decimal(12, 2)
  paymentMode   PaymentMode?
  customerName  String?
  mobile        String?
  email         String?
  date          DateTime?
  publisherCode String?
  rowHash       String?           @unique
  rawJson       Json
  createdAt     DateTime          @default(now())

  @@index([date])
  @@index([orderNo])
}
